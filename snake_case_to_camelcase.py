# -*- coding: utf-8 -*-
"""snake_Case_to_camelCase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LYajKSAqg6FEruDfWSVN4RB1JfpWdH9A
"""

# Converts Hasura schemas from _snake_case to camelCase
import sys
!{sys.executable} -m pip install pyhumps

import requests
import json
import pandas as pd
import humps
import inflect
import time

## Enter Parameters Here:
hasura_hostname = 'https://projectname.hasura.app' # stripping the /v1/graphql, etc.
admin_secret = ''
db_source = 'default'

# Introspect > query_root
query = '''
query introspectionQueryRoot {
  __type(name:"query_root") {
    kind
    name
    fields {
      name
    }
  }
}
'''
query_root = requests.post(hasura_hostname+'/v1/graphql', json={'query': query}, headers={'x-hasura-admin-secret': admin_secret})
json_data = json.loads(query_root.text)

if query_root.ok:
  fields = pd.DataFrame(json_data['data']['__type']['fields'])
else:
  print(query_root.reason)
  raise Exception("We had trouble contacting your API -- please check your hostname.") 

## Stripping from the _aggregate field to try and target just new tables and views
fields = fields[fields['name'].str.endswith('_aggregate')]
fields['name'] = fields['name'].str.replace('_aggregate', '')

print('>>> Fields to update:')
display(fields)

# Inflect word to plural / singular
p = inflect.engine()

for i in fields.index:
  # De-camel any pre-camelized names
  field_decamel = humps.decamelize(fields.at[i,'name'])

  # Split up words to lists
  words = field_decamel.split('_')

  # Plural version - last word plural
  plural = p.plural_noun(words[-1])
  if plural != False:
    plural_words = words[:-1]
    plural_words.append(plural)
  else:
    plural_words = words

  # Singular version - last word singular
  singular = p.singular_noun(words[-1])
  if singular != False:
    singular_words = words[:-1]
    singular_words.append(singular)
  else:
    singular_words = words

  # Camel-ise lists
  plural_camel = plural_words[0] + ''.join(x.title() for x in plural_words[1:])
  singular_camel = singular_words[0] + ''.join(x.title() for x in singular_words[1:])

  # Build Object
  jsondata = {}
  args={}
  configuration={}
  custom_root_fields={}

  # Create Custom Root Field Payload
  jsondata['type'] = 'pg_set_table_customization'
  args['table'] = fields.at[i,'name']
  args['source'] = db_source
  configuration['identifier'] = singular_camel
  custom_root_fields['select'] = plural_camel
  custom_root_fields['select_by_pk'] = singular_camel
  custom_root_fields['select_aggregate'] = plural_camel + 'Aggregate'
  custom_root_fields['insert'] = plural_camel + 'Insert'
  custom_root_fields['insert_one'] = singular_camel + 'Insert'
  custom_root_fields['update'] = plural_camel + 'Update'
  custom_root_fields['update_by_pk'] = singular_camel + 'Update'
  custom_root_fields['delete'] = plural_camel + 'Delete'
  custom_root_fields['delete_by_pk'] = singular_camel + 'Delete'

  jsondata['args'] = args
  args['configuration'] = configuration
  configuration['custom_root_fields'] = custom_root_fields

  update_root_fields = requests.post(hasura_hostname+'/v1/metadata', json=jsondata, headers={'x-hasura-admin-secret': admin_secret})
  if update_root_fields.ok:
      print('-----------------------------------------')
      print('Success: ' + fields.at[i,'name'])
  else:
      print('-----------------------------------------')
      print('Failure: ' + fields.at[i,'name'])
      print(update_root_fields.reason)
  time.sleep(2) # Cooldown